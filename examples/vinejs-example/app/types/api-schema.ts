/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all users
         * @description Retrieve a paginated list of all users with VineJS validation
         */
        get: operations["get_api_v1_users"];
        put?: never;
        /**
         * Create new user
         * @description Create a new user with VineJS schema validation
         */
        post: operations["post_api_v1_users"];
        delete?: never;
        options?: never;
        /**
         * Get all users
         * @description Retrieve a paginated list of all users with VineJS validation
         */
        head: operations["head_api_v1_users"];
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user by ID
         * @description Retrieve a specific user by their ID using VineJS validation
         */
        get: operations["get_api_v1_users_id"];
        /**
         * Update user
         * @description Update an existing user with VineJS validation
         */
        put: operations["put_api_v1_users_id"];
        post?: never;
        /**
         * Delete user
         * @description Delete a user by ID
         */
        delete: operations["delete_api_v1_users_id"];
        options?: never;
        /**
         * Get user by ID
         * @description Retrieve a specific user by their ID using VineJS validation
         */
        head: operations["head_api_v1_users_id"];
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateUserSchema: {
            name: string;
            email: string;
            age?: number;
        };
        UpdateUserSchema: {
            name?: string;
            email?: string;
            age?: number;
        };
        UserListSchema: {
            data: {
                id: number;
                name: string;
                email: string;
                age?: number;
                /** Format: date-time */
                createdAt: string;
                /** Format: date-time */
                updatedAt: string;
            }[];
            meta: {
                total: number;
                page: number;
                perPage: number;
                lastPage: number;
            };
        };
        UserSchema: {
            id: number;
            name: string;
            email: string;
            age?: number;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        campaignCustomerSchema: {
            id: number;
            campaignId: string;
            customerName: string;
            customerPhoneNumber: string;
            metadata?: Record<string, never> | null;
            callStatus: string;
            callScheduledAt?: string | null;
            livekitSessionId?: string | null;
            livekitAgentName?: string | null;
            livekitRoomName?: string | null;
            callStartedAt?: string | null;
            callEndedAt?: string | null;
            createdAt: string;
            updatedAt: string;
        };
        campaignDetailResponseSchema: {
            data: {
                id: string;
                name: string;
                slug: string;
                description?: string | null;
                fileName?: string | null;
                startAt?: string | null;
                uploadedByUserId?: string | null;
                campaignStartAt?: string | null;
                campaignEndAt?: string | null;
                status: string;
                createdAt: string;
                updatedAt: string;
                uploadedByUser?: {
                    id: string;
                    name: string;
                    email: string;
                    emailVerified: boolean;
                    image?: string | null;
                    createdAt: string;
                    updatedAt: string;
                    role?: string | null;
                    banned?: boolean | null;
                    banReason?: string | null;
                    banExpires?: string | null;
                    isAnonymous?: boolean | null;
                } | null;
                customers: {
                    id: number;
                    campaignId: string;
                    customerName: string;
                    customerPhoneNumber: string;
                    metadata?: Record<string, never> | null;
                    callStatus: string;
                    callScheduledAt?: string | null;
                    livekitSessionId?: string | null;
                    livekitAgentName?: string | null;
                    livekitRoomName?: string | null;
                    callStartedAt?: string | null;
                    callEndedAt?: string | null;
                    createdAt: string;
                    updatedAt: string;
                }[];
            };
        };
        campaignListResponseSchema: {
            data: {
                id: string;
                name: string;
                slug: string;
                description?: string | null;
                fileName?: string | null;
                startAt?: string | null;
                uploadedByUserId?: string | null;
                campaignStartAt?: string | null;
                campaignEndAt?: string | null;
                status: string;
                createdAt: string;
                updatedAt: string;
                uploadedByUser?: {
                    id: string;
                    name: string;
                    email: string;
                    emailVerified: boolean;
                    image?: string | null;
                    createdAt: string;
                    updatedAt: string;
                    role?: string | null;
                    banned?: boolean | null;
                    banReason?: string | null;
                    banExpires?: string | null;
                    isAnonymous?: boolean | null;
                } | null;
            }[];
        };
        campaignSchema: {
            id: string;
            name: string;
            slug: string;
            description?: string | null;
            fileName?: string | null;
            startAt?: string | null;
            uploadedByUserId?: string | null;
            campaignStartAt?: string | null;
            campaignEndAt?: string | null;
            status: string;
            createdAt: string;
            updatedAt: string;
            uploadedByUser?: {
                id: string;
                name: string;
                email: string;
                emailVerified: boolean;
                image?: string | null;
                createdAt: string;
                updatedAt: string;
                role?: string | null;
                banned?: boolean | null;
                banReason?: string | null;
                banExpires?: string | null;
                isAnonymous?: boolean | null;
            } | null;
        };
        campaignWithCustomersSchema: {
            id: string;
            name: string;
            slug: string;
            description?: string | null;
            fileName?: string | null;
            startAt?: string | null;
            uploadedByUserId?: string | null;
            campaignStartAt?: string | null;
            campaignEndAt?: string | null;
            status: string;
            createdAt: string;
            updatedAt: string;
            uploadedByUser?: {
                id: string;
                name: string;
                email: string;
                emailVerified: boolean;
                image?: string | null;
                createdAt: string;
                updatedAt: string;
                role?: string | null;
                banned?: boolean | null;
                banReason?: string | null;
                banExpires?: string | null;
                isAnonymous?: boolean | null;
            } | null;
            customers: {
                id: number;
                campaignId: string;
                customerName: string;
                customerPhoneNumber: string;
                metadata?: Record<string, never> | null;
                callStatus: string;
                callScheduledAt?: string | null;
                livekitSessionId?: string | null;
                livekitAgentName?: string | null;
                livekitRoomName?: string | null;
                callStartedAt?: string | null;
                callEndedAt?: string | null;
                createdAt: string;
                updatedAt: string;
            }[];
        };
        errorResponseSchema: {
            error: string;
        };
        userSchema: {
            id: string;
            name: string;
            email: string;
            emailVerified: boolean;
            image?: string | null;
            createdAt: string;
            updatedAt: string;
            role?: string | null;
            banned?: boolean | null;
            banReason?: string | null;
            banExpires?: string | null;
            isAnonymous?: boolean | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_api_v1_users: {
        parameters: {
            query?: {
                /** @description Number of items per page */
                limit?: number;
                /** @description Page number for pagination */
                page?: number;
            };
            header?: {
                /** @description API version header */
                "X-API-Version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: number;
                            name: string;
                            email: string;
                            age?: number;
                            /** Format: date-time */
                            createdAt: string;
                            /** Format: date-time */
                            updatedAt: string;
                        }[];
                        meta: {
                            total: number;
                            page: number;
                            perPage: number;
                            lastPage: number;
                        };
                    };
                };
            };
            /** @description Invalid query parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    post_api_v1_users: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description User data */
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    email: string;
                    age?: number;
                };
                "application/x-www-form-urlencoded": {
                    name: string;
                    email: string;
                    age?: number;
                };
            };
        };
        responses: {
            /** @description User created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: number;
                        name: string;
                        email: string;
                        age?: number;
                        /** Format: date-time */
                        createdAt: string;
                        /** Format: date-time */
                        updatedAt: string;
                    };
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid input data */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    head_api_v1_users: {
        parameters: {
            query?: {
                /** @description Number of items per page */
                limit?: number;
                /** @description Page number for pagination */
                page?: number;
            };
            header?: {
                /** @description API version header */
                "X-API-Version"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            id: number;
                            name: string;
                            email: string;
                            age?: number;
                            /** Format: date-time */
                            createdAt: string;
                            /** Format: date-time */
                            updatedAt: string;
                        }[];
                        meta: {
                            total: number;
                            page: number;
                            perPage: number;
                            lastPage: number;
                        };
                    };
                };
            };
            /** @description Invalid query parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_api_v1_users_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: number;
                        name: string;
                        email: string;
                        age?: number;
                        /** Format: date-time */
                        createdAt: string;
                        /** Format: date-time */
                        updatedAt: string;
                    };
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    put_api_v1_users_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                id: number;
            };
            cookie?: never;
        };
        /** @description User update data */
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    email?: string;
                    age?: number;
                };
                "application/x-www-form-urlencoded": {
                    name?: string;
                    email?: string;
                    age?: number;
                };
            };
        };
        responses: {
            /** @description User updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: number;
                        name: string;
                        email: string;
                        age?: number;
                        /** Format: date-time */
                        createdAt: string;
                        /** Format: date-time */
                        updatedAt: string;
                    };
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_api_v1_users_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    head_api_v1_users_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description User ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        id: number;
                        name: string;
                        email: string;
                        age?: number;
                        /** Format: date-time */
                        createdAt: string;
                        /** Format: date-time */
                        updatedAt: string;
                    };
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
